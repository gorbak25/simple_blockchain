defmodule Miner do
  @moduledoc """
  Documentation for Miner.
  This module implements a block miner.
  Many miners may coexist together.
  """

  @doc """
  Prepares a new block from the available unconfirmed transactions and
  sets fees+block_reward recipient.
  The required data for this function must be generated by the 
  WalletAccount.get_details_for_receiving_mining_rewards/1 function
  """
  def prepare_new_block({miner_pub_key, miner_pub_key_signature}) do
    block_header = %BlockHeader{
      prev_hash: SimpleBlockchain.get_newest_block_hash(),
      difficulty: SimpleBlockchain.get_current_difficulty(),
      miner_pub_key: miner_pub_key,
      miner_proof_of_priv_key: miner_pub_key_signature,
      chain_state_merkle_hash: :crypto.hash(:sha256, ""),
      transactions_merkle_hash: :crypto.hash(:sha256, "")
    }

    transactions =
      TransactionPool.get_mineable_transactions()
      |> Enum.map(fn {_, transaction} -> transaction end)
      |> Enum.sort_by(&Transaction.get_transaction_fee/1, &>=/2)
      |> Enum.take(100)

    %Block{
      header: block_header,
      body: %BlockBody{transactions: transactions}
    }
  end

  @doc """
  Miner main loop.
  Take note that we can mine using a native C++ miner (WIP) by setting the native? argument to true
  """
  def process(miner_account, native?) do
    block = prepare_new_block(miner_account)

    mined =
      if native? do
        native_mine(block)
      else
        elixir_mine(block)
      end

    SimpleBlockchain.register_mined_block(mined)

    process(miner_account, native?)
  end

  @doc """
  Mines a block in Elixir and prints status info to stdout
  """
  def elixir_mine(block) do
    case Block.verify_POW(block) do
      :ok ->
        IO.puts("Found nonce #{block.header.nonce}")
        block

      {:error, :invalid_pow} ->
        elixir_mine(Block.increase_nonce(block))
    end
  end

  @doc """
  Mines a block using the provided native C++ miner(WIP) and prints status info to stdout.
  WARNING: Not implemented
  """
  def native_mine(_) do
  end

  @doc """
  Starts mining blocks. The rewards will be received by the miner_account.
  """
  def mine_forever(miner_account, native?) do
    case Task.start_link(fn -> process(miner_account, native?) end) do
      {:ok, _} -> :ok
      {:error, _} -> raise "Could not start miner"
    end
  end
end
